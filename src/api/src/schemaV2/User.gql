type User implements Entity {
	id: UuidV4!
	name: NonEmptyString
	email: NonEmptyString # TODO: Implement a custom "Email" Scalar?
	userName: NonEmptyString
	createdAt: DateTime!
	updatedAt: DateTime!

	# Formattable fields (fugly! but works)
	forDisplayCreatedAt(format: DateFormatEnum): NonEmptyString!
	forDisplayUpdatedAt(format: DateFormatEnum): NonEmptyString!

	listingConnection(
		cursor: CursorPaginationParams
		sortBy: ListingOrderEnum = CREATED_AT
		reverse: Boolean = false
	): ListingConnection

	favoriteListingsConnection(
		pagination: PagePaginationParams
		sortBy: ListingOrderEnum = CREATED_AT
		reverse: Boolean = false
	): FavoriteListingConnection

	labelsConnection(
		pagination: PagePaginationParams
		sortBy: GenericSortBy = CREATED_AT
		reverse: Boolean = false
	): LabelsConnection

	receiptsConnection(
		pagination: PagePaginationParams
		sortBy: GenericSortBy = CREATED_AT
		reverse: Boolean = false
	): ReceiptsConnection

	# TODO: Needs more args to separate type of messages (own, replies from others, etc.)
	messagesConnection(
		pagination: PagePaginationParams
		sortBy: GenericSortBy = CREATED_AT
		reverse: Boolean = false
	): MessagesConnection
}

# TODO: Move to separate FavoriteListing type
# "Saved-Search of listings" belonging to User, paginated
type FavoriteListingConnection implements PaginatedConnection {
	# A list of edges (same as nodes but with cursor).
	edges: [FavoriteListingEdge]
	# A list of nodes.
	nodes: [Listing!]
	# Information to aid in pagination.
	pageInfo: PageInfo!
	# Identifies the total count of items in the connection.
	totalCount: Int!
}
# TODO: Move to separate FavoriteListing type
# Connection details between a "Saved-Search of listings" and a User
type FavoriteListingEdge implements DatedEdge {
	node: Listing
	createdAt: DateTime!
}

extend type Query {
	user(id: UuidV4!): User
}
